-falign-functions
-falign-functions=n
	Alinear el inicio de funciones, a la siguiente potencia de dos mayor que n, saltar hasta el n-esimo byte. Por ejemplo,-falign-functions = 32  alinea el próximo 32-byte frontera, pero -falign-functions = 24 solo puede alinear a la próxima 32-byte frontera sólo si esto se puede hacer saltando por 23 bytes o menos.

-falign-jumps
-falign-jumps=n
	Alinear los branch especificos a una potencia de dos límites, para aquellos brach que solo se puedan lograr mediante "saltos", saltando hasta el n-octeto como -falign-funtions. En este caso, no se necesitan operaciones ficticias al ser ejecutado.

-falign-labels
-falign-labels=n
	Es como -falign-jumps, solo que se insertan operaciones ficticias o basura para llevar a cabo este proceso.

-falign-loops
-falign-loops=n
	Es como -falign-functions, pero para los ciclos, en donde se encarga de "limpiar y manejar" las operaciones basura o creadas por el compilador

-fbranch-probabilities
	La idea es optimizar el numero de veces que se hace o se ejecuta un branch

-fbranch-target-load-optimize
	Ver nota 1

-fbranch-target-load-optimize2
	Ver nota 1

-fbtr-bb-exclusive
	Solo sirve con optimizaciones que manipulen los branch, ver nota 2

-fcaller-saves
	Ver nota 3

-fcprop-registers
	Después de la asignación de registros y la distribución de las instrucciones en los registros, realizamos una copia de propagación para tratar las dependencias entre registros y, en ocasiones, eliminar la copia.

-fcrossjumping
	Esta transformación unifica código equivalente y ahorra tamaño en el código. El código resultante puede o no puede que dar mejor que sin usar esta optimización.

-fcse-follow-jumps
-fcse-skip-blocks
	No encontramos como funciona la eliminacion de las subexpresiones lugares, creemos que ahorra tamaño de código.

-fcx-limited-range
	Esta opción "mejora" el código, lo "embellese", controlando el numero de pragma o opciones de compilardor que un codigo maneja, no realiza una verdadera optimización sobre los dos enfoques de esta investigación eficiencia y espacio. Ver nota 1

-fdata-sections
	Esta opción sirve para maquínas con procesadores Sparc y con sistemas operativos SUN_SOLARIS, maquínas con las que no contamos para la investigación

-fdelete-null-pointer-checks
	Utiliza un análisis de flujo de datos global para identificar y eliminar controles inútiles para los punteros nulos. El compilador asume que un error de puntero nulo podría haber detenido el programa. Si un puntero se comprueba después de que ya se ha descartado, no puede ser nulo.

	En algunos entornos, esta hipótesis no es cierto. Utilice -fno-delete-null-pointer-checks  para desactivar esta optimización de los programas que dependen de este comportamiento.

-fexpensive-optimizations
	Intenta realizar un numero minimo de optimizaciones

-ffast-math -fno-math-errno
	Realiza operaciones "ilegales" matematicamente hablando puesto que puede asumir falacias e ir encontra de la precision y reglas. Y nuestros compiladores no tienen activada esta opción


-ffinite-math-only
	Permitir optimizaciones de aritmética de punto flotante  en donde se asumen que los argumentos y los resultados no son NaNs o +-Infs.
	Realiza operaciones "ilegales" matematicamente hablando puesto que puede asumir falacias e ir encontra de la precision y reglas

-ffloat-store
	Esta opción es obsoleta en la arquitectura de las máquinas usadas en la investigación

NOTAS
1- Esta optimizacion sirve realmente para maquinas multi-core y la verdad no hace parte de la investigación el analisis de las diferentes arquitecturas y su impacto en el desarrollo de programas
2- No sirve de nada sola
3- Esta optimización siempre esta por defecto en las maquínas utilizadas en la investigación